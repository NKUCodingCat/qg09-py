>>> Q = open("../../qg09py").read()
>>> import imp, os
>>> module = imp.new_module("qg09")
>>> exec Q in module.__dict__

>>> # ---- Build env end, TEST submit_pbs_job  ----
>>> # ---- TEST fix_input  ----

>>> Gau_inp = """\
... # b3lyp/genecp opt(MaxC=80) scfcyc=256
... 
... Coal_kick_v2_Trial # 56
... 
... 0 1
... C    2.291814   -2.356344   -1.351987
... H    1.195092   -2.362162   -1.390523
... O    2.952558   -2.646755   -0.394493
... 
... C O 0
... 6-31+G*
... ****
... H 0
... 3-21g
... ****
... 
... 
... 
... 
... """

>>> S = Gau_inp[:]
>>> Gau_inp = module.fix_input(Gau_inp, "^%nprocs[^=]*=[^=]+$", "%%NProcShared=%d"%20)
>>> Gau_inp = module.fix_input(Gau_inp, "^%mem[^=]*=[^=]+$",    "%%mem=%dmb"%5120)
>>> Gau_inp
'%mem=5120mb\n%NProcShared=20\n# b3lyp/genecp opt(MaxC=80) scfcyc=256\n\nCoal_kick_v2_Trial # 56\n\n0 1\nC    2.291814   -2.356344   -1.351987\nH    1.195092   -2.362162   -1.390523\nO    2.952558   -2.646755   -0.394493\n\nC O 0\n6-31+G*\n****\nH 0\n3-21g\n****\n\n\n\n\n'
>>> S.endswith("\n\n\n\n\n")   == Gau_inp.endswith("\n\n\n\n\n")   == True
True
>>> S.endswith("\n\n\n\n\n\n") == Gau_inp.endswith("\n\n\n\n\n\n") == False
True


>>> # ---- TEST make_Gau_job_Block  ----

>>> A, B = module.make_Gau_job_Block("TEST.gjf", "TEST.log", ".", "/tmp")
>>> A
'\ncd .\nmkdir -p /tmp\nexport GAUSS_SCRDIR="/tmp"\nexport QG09_GAU_INP_FILE="TEST.gjf"\nexport QG09_GAU_LOG_FILE="TEST.log"\n'
>>> B
'/usr/bin/time g09 < $QG09_GAU_INP_FILE >& $QG09_GAU_LOG_FILE\nif ls "/tmp/*.rwf" 2>&1; then rm "/tmp/*.rwf"; fi \n'

>>> # ---- TEST Merge_Config  ----

>>> module.Merge_Config(   # sliently ignore key not exists
...      {"Test_1": "dahpsfse"}, 
...      {"Test_2": "djsjofe"} 
... ) == {'Test_1': 'dahpsfse'}
True

>>> module.Merge_Config(   # Normal behaviour
...      {"Test_1": "dahpsfse"}, 
...      {"Test_1": "djsjofe"} 
... ) == {"Test_1": "djsjofe"} 
True

>>> module.Merge_Config(  # Normal behaviour
...      {"Test_1": "dahpsfse", "Test_2": {"Test_2_1": 1}}, 
...      {"Test_1": "djsjofe"} 
... ) == {'Test_1': 'djsjofe', 'Test_2': {'Test_2_1': 1} }
True


>>> module.Merge_Config(    # sliently ignore key not exists
...      {"Test_1": "dahpsfse", "Test_2": {"Test_2_1": 1}}, 
...      {"Test_2": {"Test_2_2": "dafew"} } 
... ) == {"Test_1": "dahpsfse", "Test_2": {"Test_2_1": 1}}
True

>>> module.Merge_Config(   # Try to replace a str by dict
...      {"Test_1": "dahpsfse", "Test_2": "jdskaks"}, 
...      {"Test_2": {"Test_2_2": "dafew"} } 
... )
Traceback (most recent call last):
AssertionError: Overriding config key "Test_2" is a dictionary

>>> module.Merge_Config( # Try to replace a sict by str
...      {"Test_1": "dahpsfse", "Test_2": {"Test_2_2": "dafew"}}, 
...      {"Test_2": "jdskaks" } 
... )
Traceback (most recent call last):
AssertionError: Overriding config key "Test_2" is not a dictionary

>>> module.Merge_Config( # Normal behaviour
...      {"Test_1": "dahpsfse", "Test_2": {"Test_2_2": 2}}, 
...      {"Test_2": {"Test_2_2": 20} } 
... ) == {"Test_1": "dahpsfse", "Test_2": {"Test_2_2": 20}}
True